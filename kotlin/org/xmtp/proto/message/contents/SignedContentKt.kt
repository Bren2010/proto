//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/content.proto

package org.xmtp.proto.message.contents;

@kotlin.jvm.JvmName("-initializesignedContent")
public inline fun signedContent(block: org.xmtp.proto.message.contents.SignedContentKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.Content.SignedContent =
  org.xmtp.proto.message.contents.SignedContentKt.Dsl._create(org.xmtp.proto.message.contents.Content.SignedContent.newBuilder()).apply { block() }._build()
public object SignedContentKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.xmtp.proto.message.contents.Content.SignedContent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.xmtp.proto.message.contents.Content.SignedContent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.xmtp.proto.message.contents.Content.SignedContent = _builder.build()

    /**
     * <pre>
     * MUST contain EncodedContent
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     */
    public var payload: com.google.protobuf.ByteString
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * <pre>
     * MUST contain EncodedContent
     * </pre>
     *
     * <code>bytes payload = 1;</code>
     */
    public fun clearPayload() {
      _builder.clearPayload()
    }

    /**
     * <code>.xmtp.message_contents.SignedPublicKeyBundle sender = 2;</code>
     */
    public var sender: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundle
      @JvmName("getSender")
      get() = _builder.getSender()
      @JvmName("setSender")
      set(value) {
        _builder.setSender(value)
      }
    /**
     * <code>.xmtp.message_contents.SignedPublicKeyBundle sender = 2;</code>
     */
    public fun clearSender() {
      _builder.clearSender()
    }
    /**
     * <code>.xmtp.message_contents.SignedPublicKeyBundle sender = 2;</code>
     * @return Whether the sender field is set.
     */
    public fun hasSender(): kotlin.Boolean {
      return _builder.hasSender()
    }

    /**
     * <pre>
     * MUST be a signature of a concatenation of
     * the message header bytes and the payload bytes,
     * signed by the sender's pre-key.
     * </pre>
     *
     * <code>.xmtp.message_contents.Signature signature = 3;</code>
     */
    public var signature: org.xmtp.proto.message.contents.SignatureOuterClass.Signature
      @JvmName("getSignature")
      get() = _builder.getSignature()
      @JvmName("setSignature")
      set(value) {
        _builder.setSignature(value)
      }
    /**
     * <pre>
     * MUST be a signature of a concatenation of
     * the message header bytes and the payload bytes,
     * signed by the sender's pre-key.
     * </pre>
     *
     * <code>.xmtp.message_contents.Signature signature = 3;</code>
     */
    public fun clearSignature() {
      _builder.clearSignature()
    }
    /**
     * <pre>
     * MUST be a signature of a concatenation of
     * the message header bytes and the payload bytes,
     * signed by the sender's pre-key.
     * </pre>
     *
     * <code>.xmtp.message_contents.Signature signature = 3;</code>
     * @return Whether the signature field is set.
     */
    public fun hasSignature(): kotlin.Boolean {
      return _builder.hasSignature()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.xmtp.proto.message.contents.Content.SignedContent.copy(block: org.xmtp.proto.message.contents.SignedContentKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.Content.SignedContent =
  org.xmtp.proto.message.contents.SignedContentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.xmtp.proto.message.contents.Content.SignedContentOrBuilder.senderOrNull: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundle?
  get() = if (hasSender()) getSender() else null

public val org.xmtp.proto.message.contents.Content.SignedContentOrBuilder.signatureOrNull: org.xmtp.proto.message.contents.SignatureOuterClass.Signature?
  get() = if (hasSignature()) getSignature() else null

