//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/invitation.proto

package org.xmtp.proto.message.contents;

@kotlin.jvm.JvmName("-initializeinvitationV1")
public inline fun invitationV1(block: org.xmtp.proto.message.contents.InvitationV1Kt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.Invitation.InvitationV1 =
  org.xmtp.proto.message.contents.InvitationV1Kt.Dsl._create(org.xmtp.proto.message.contents.Invitation.InvitationV1.newBuilder()).apply { block() }._build()
public object InvitationV1Kt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.xmtp.proto.message.contents.Invitation.InvitationV1.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.xmtp.proto.message.contents.Invitation.InvitationV1.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.xmtp.proto.message.contents.Invitation.InvitationV1 = _builder.build()

    /**
     * <pre>
     * topic name chosen for this conversation.
     * It MUST be randomly generated bytes (length &gt;= 32),
     * then base64 encoded without padding
     * </pre>
     *
     * <code>string topic = 1;</code>
     */
    public var topic: kotlin.String
      @JvmName("getTopic")
      get() = _builder.getTopic()
      @JvmName("setTopic")
      set(value) {
        _builder.setTopic(value)
      }
    /**
     * <pre>
     * topic name chosen for this conversation.
     * It MUST be randomly generated bytes (length &gt;= 32),
     * then base64 encoded without padding
     * </pre>
     *
     * <code>string topic = 1;</code>
     */
    public fun clearTopic() {
      _builder.clearTopic()
    }

    /**
     * <pre>
     * A context object defining metadata
     * </pre>
     *
     * <code>.xmtp.message_contents.InvitationV1.Context context = 2;</code>
     */
    public var context: org.xmtp.proto.message.contents.Invitation.InvitationV1.Context
      @JvmName("getContext")
      get() = _builder.getContext()
      @JvmName("setContext")
      set(value) {
        _builder.setContext(value)
      }
    /**
     * <pre>
     * A context object defining metadata
     * </pre>
     *
     * <code>.xmtp.message_contents.InvitationV1.Context context = 2;</code>
     */
    public fun clearContext() {
      _builder.clearContext()
    }
    /**
     * <pre>
     * A context object defining metadata
     * </pre>
     *
     * <code>.xmtp.message_contents.InvitationV1.Context context = 2;</code>
     * @return Whether the context field is set.
     */
    public fun hasContext(): kotlin.Boolean {
      return _builder.hasContext()
    }

    /**
     * <pre>
     * Specify the encryption method to process the key material properly.
     * </pre>
     *
     * <code>.xmtp.message_contents.InvitationV1.Aes256gcmHkdfsha256 aes256_gcm_hkdf_sha256 = 3;</code>
     */
    public var aes256GcmHkdfSha256: org.xmtp.proto.message.contents.Invitation.InvitationV1.Aes256gcmHkdfsha256
      @JvmName("getAes256GcmHkdfSha256")
      get() = _builder.getAes256GcmHkdfSha256()
      @JvmName("setAes256GcmHkdfSha256")
      set(value) {
        _builder.setAes256GcmHkdfSha256(value)
      }
    /**
     * <pre>
     * Specify the encryption method to process the key material properly.
     * </pre>
     *
     * <code>.xmtp.message_contents.InvitationV1.Aes256gcmHkdfsha256 aes256_gcm_hkdf_sha256 = 3;</code>
     */
    public fun clearAes256GcmHkdfSha256() {
      _builder.clearAes256GcmHkdfSha256()
    }
    /**
     * <pre>
     * Specify the encryption method to process the key material properly.
     * </pre>
     *
     * <code>.xmtp.message_contents.InvitationV1.Aes256gcmHkdfsha256 aes256_gcm_hkdf_sha256 = 3;</code>
     * @return Whether the aes256GcmHkdfSha256 field is set.
     */
    public fun hasAes256GcmHkdfSha256(): kotlin.Boolean {
      return _builder.hasAes256GcmHkdfSha256()
    }
    public val encryptionCase: org.xmtp.proto.message.contents.Invitation.InvitationV1.EncryptionCase
      @JvmName("getEncryptionCase")
      get() = _builder.getEncryptionCase()

    public fun clearEncryption() {
      _builder.clearEncryption()
    }
  }
  @kotlin.jvm.JvmName("-initializeaes256gcmHkdfsha256")
  public inline fun aes256gcmHkdfsha256(block: org.xmtp.proto.message.contents.InvitationV1Kt.Aes256gcmHkdfsha256Kt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.Invitation.InvitationV1.Aes256gcmHkdfsha256 =
    org.xmtp.proto.message.contents.InvitationV1Kt.Aes256gcmHkdfsha256Kt.Dsl._create(org.xmtp.proto.message.contents.Invitation.InvitationV1.Aes256gcmHkdfsha256.newBuilder()).apply { block() }._build()
  public object Aes256gcmHkdfsha256Kt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: org.xmtp.proto.message.contents.Invitation.InvitationV1.Aes256gcmHkdfsha256.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: org.xmtp.proto.message.contents.Invitation.InvitationV1.Aes256gcmHkdfsha256.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): org.xmtp.proto.message.contents.Invitation.InvitationV1.Aes256gcmHkdfsha256 = _builder.build()

      /**
       * <pre>
       * randomly generated key material (32 bytes)
       * </pre>
       *
       * <code>bytes key_material = 1;</code>
       */
      public var keyMaterial: com.google.protobuf.ByteString
        @JvmName("getKeyMaterial")
        get() = _builder.getKeyMaterial()
        @JvmName("setKeyMaterial")
        set(value) {
          _builder.setKeyMaterial(value)
        }
      /**
       * <pre>
       * randomly generated key material (32 bytes)
       * </pre>
       *
       * <code>bytes key_material = 1;</code>
       */
      public fun clearKeyMaterial() {
        _builder.clearKeyMaterial()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializecontext")
  public inline fun context(block: org.xmtp.proto.message.contents.InvitationV1Kt.ContextKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.Invitation.InvitationV1.Context =
    org.xmtp.proto.message.contents.InvitationV1Kt.ContextKt.Dsl._create(org.xmtp.proto.message.contents.Invitation.InvitationV1.Context.newBuilder()).apply { block() }._build()
  public object ContextKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: org.xmtp.proto.message.contents.Invitation.InvitationV1.Context.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: org.xmtp.proto.message.contents.Invitation.InvitationV1.Context.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): org.xmtp.proto.message.contents.Invitation.InvitationV1.Context = _builder.build()

      /**
       * <pre>
       * Expected to be a URI (ie xmtp.org/convo1)
       * </pre>
       *
       * <code>string conversation_id = 1;</code>
       */
      public var conversationId: kotlin.String
        @JvmName("getConversationId")
        get() = _builder.getConversationId()
        @JvmName("setConversationId")
        set(value) {
          _builder.setConversationId(value)
        }
      /**
       * <pre>
       * Expected to be a URI (ie xmtp.org/convo1)
       * </pre>
       *
       * <code>string conversation_id = 1;</code>
       */
      public fun clearConversationId() {
        _builder.clearConversationId()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class MetadataProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Key value map of additional metadata that would be exposed to
       * application developers and could be used for filtering
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 2;</code>
       */
       public val metadata: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
        @kotlin.jvm.JvmSynthetic
        @JvmName("getMetadataMap")
        get() = com.google.protobuf.kotlin.DslMap(
          _builder.getMetadataMap()
        )
      /**
       * <pre>
       * Key value map of additional metadata that would be exposed to
       * application developers and could be used for filtering
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 2;</code>
       */
      @JvmName("putMetadata")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
        .put(key: kotlin.String, value: kotlin.String) {
           _builder.putMetadata(key, value)
         }
      /**
       * <pre>
       * Key value map of additional metadata that would be exposed to
       * application developers and could be used for filtering
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("setMetadata")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
        .set(key: kotlin.String, value: kotlin.String) {
           put(key, value)
         }
      /**
       * <pre>
       * Key value map of additional metadata that would be exposed to
       * application developers and could be used for filtering
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("removeMetadata")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
        .remove(key: kotlin.String) {
           _builder.removeMetadata(key)
         }
      /**
       * <pre>
       * Key value map of additional metadata that would be exposed to
       * application developers and could be used for filtering
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("putAllMetadata")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
        .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
           _builder.putAllMetadata(map)
         }
      /**
       * <pre>
       * Key value map of additional metadata that would be exposed to
       * application developers and could be used for filtering
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("clearMetadata")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
        .clear() {
           _builder.clearMetadata()
         }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.xmtp.proto.message.contents.Invitation.InvitationV1.copy(block: org.xmtp.proto.message.contents.InvitationV1Kt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.Invitation.InvitationV1 =
  org.xmtp.proto.message.contents.InvitationV1Kt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun org.xmtp.proto.message.contents.Invitation.InvitationV1.Aes256gcmHkdfsha256.copy(block: org.xmtp.proto.message.contents.InvitationV1Kt.Aes256gcmHkdfsha256Kt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.Invitation.InvitationV1.Aes256gcmHkdfsha256 =
  org.xmtp.proto.message.contents.InvitationV1Kt.Aes256gcmHkdfsha256Kt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun org.xmtp.proto.message.contents.Invitation.InvitationV1.Context.copy(block: org.xmtp.proto.message.contents.InvitationV1Kt.ContextKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.Invitation.InvitationV1.Context =
  org.xmtp.proto.message.contents.InvitationV1Kt.ContextKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.xmtp.proto.message.contents.Invitation.InvitationV1OrBuilder.contextOrNull: org.xmtp.proto.message.contents.Invitation.InvitationV1.Context?
  get() = if (hasContext()) getContext() else null

public val org.xmtp.proto.message.contents.Invitation.InvitationV1OrBuilder.aes256GcmHkdfSha256OrNull: org.xmtp.proto.message.contents.Invitation.InvitationV1.Aes256gcmHkdfsha256?
  get() = if (hasAes256GcmHkdfSha256()) getAes256GcmHkdfSha256() else null

