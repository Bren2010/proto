//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/public_key.proto

package org.xmtp.proto.message.contents;

@kotlin.jvm.JvmName("-initializesignedPublicKey")
public inline fun signedPublicKey(block: org.xmtp.proto.message.contents.SignedPublicKeyKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey =
  org.xmtp.proto.message.contents.SignedPublicKeyKt.Dsl._create(org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey.newBuilder()).apply { block() }._build()
public object SignedPublicKeyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey = _builder.build()

    /**
     * <pre>
     * embeds an UnsignedPublicKey
     * </pre>
     *
     * <code>bytes key_bytes = 1;</code>
     */
    public var keyBytes: com.google.protobuf.ByteString
      @JvmName("getKeyBytes")
      get() = _builder.getKeyBytes()
      @JvmName("setKeyBytes")
      set(value) {
        _builder.setKeyBytes(value)
      }
    /**
     * <pre>
     * embeds an UnsignedPublicKey
     * </pre>
     *
     * <code>bytes key_bytes = 1;</code>
     */
    public fun clearKeyBytes() {
      _builder.clearKeyBytes()
    }

    /**
     * <pre>
     * signs key_bytes
     * </pre>
     *
     * <code>.xmtp.message_contents.Signature signature = 2;</code>
     */
    public var signature: org.xmtp.proto.message.contents.SignatureOuterClass.Signature
      @JvmName("getSignature")
      get() = _builder.getSignature()
      @JvmName("setSignature")
      set(value) {
        _builder.setSignature(value)
      }
    /**
     * <pre>
     * signs key_bytes
     * </pre>
     *
     * <code>.xmtp.message_contents.Signature signature = 2;</code>
     */
    public fun clearSignature() {
      _builder.clearSignature()
    }
    /**
     * <pre>
     * signs key_bytes
     * </pre>
     *
     * <code>.xmtp.message_contents.Signature signature = 2;</code>
     * @return Whether the signature field is set.
     */
    public fun hasSignature(): kotlin.Boolean {
      return _builder.hasSignature()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey.copy(block: org.xmtp.proto.message.contents.SignedPublicKeyKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey =
  org.xmtp.proto.message.contents.SignedPublicKeyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyOrBuilder.signatureOrNull: org.xmtp.proto.message.contents.SignatureOuterClass.Signature?
  get() = if (hasSignature()) getSignature() else null

