//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/message.proto

package org.xmtp.proto.message.contents;

@kotlin.jvm.JvmName("-initializemessageHeaderV1")
public inline fun messageHeaderV1(block: org.xmtp.proto.message.contents.MessageHeaderV1Kt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.MessageOuterClass.MessageHeaderV1 =
  org.xmtp.proto.message.contents.MessageHeaderV1Kt.Dsl._create(org.xmtp.proto.message.contents.MessageOuterClass.MessageHeaderV1.newBuilder()).apply { block() }._build()
public object MessageHeaderV1Kt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.xmtp.proto.message.contents.MessageOuterClass.MessageHeaderV1.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.xmtp.proto.message.contents.MessageOuterClass.MessageHeaderV1.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.xmtp.proto.message.contents.MessageOuterClass.MessageHeaderV1 = _builder.build()

    /**
     * <code>.xmtp.message_contents.PublicKeyBundle sender = 1;</code>
     */
    public var sender: org.xmtp.proto.message.contents.PublicKeyOuterClass.PublicKeyBundle
      @JvmName("getSender")
      get() = _builder.getSender()
      @JvmName("setSender")
      set(value) {
        _builder.setSender(value)
      }
    /**
     * <code>.xmtp.message_contents.PublicKeyBundle sender = 1;</code>
     */
    public fun clearSender() {
      _builder.clearSender()
    }
    /**
     * <code>.xmtp.message_contents.PublicKeyBundle sender = 1;</code>
     * @return Whether the sender field is set.
     */
    public fun hasSender(): kotlin.Boolean {
      return _builder.hasSender()
    }

    /**
     * <code>.xmtp.message_contents.PublicKeyBundle recipient = 2;</code>
     */
    public var recipient: org.xmtp.proto.message.contents.PublicKeyOuterClass.PublicKeyBundle
      @JvmName("getRecipient")
      get() = _builder.getRecipient()
      @JvmName("setRecipient")
      set(value) {
        _builder.setRecipient(value)
      }
    /**
     * <code>.xmtp.message_contents.PublicKeyBundle recipient = 2;</code>
     */
    public fun clearRecipient() {
      _builder.clearRecipient()
    }
    /**
     * <code>.xmtp.message_contents.PublicKeyBundle recipient = 2;</code>
     * @return Whether the recipient field is set.
     */
    public fun hasRecipient(): kotlin.Boolean {
      return _builder.hasRecipient()
    }

    /**
     * <code>uint64 timestamp = 3;</code>
     */
    public var timestamp: kotlin.Long
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * <code>uint64 timestamp = 3;</code>
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.xmtp.proto.message.contents.MessageOuterClass.MessageHeaderV1.copy(block: org.xmtp.proto.message.contents.MessageHeaderV1Kt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.MessageOuterClass.MessageHeaderV1 =
  org.xmtp.proto.message.contents.MessageHeaderV1Kt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.xmtp.proto.message.contents.MessageOuterClass.MessageHeaderV1OrBuilder.senderOrNull: org.xmtp.proto.message.contents.PublicKeyOuterClass.PublicKeyBundle?
  get() = if (hasSender()) getSender() else null

public val org.xmtp.proto.message.contents.MessageOuterClass.MessageHeaderV1OrBuilder.recipientOrNull: org.xmtp.proto.message.contents.PublicKeyOuterClass.PublicKeyBundle?
  get() = if (hasRecipient()) getRecipient() else null

