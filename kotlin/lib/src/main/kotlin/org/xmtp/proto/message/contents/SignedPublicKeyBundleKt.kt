//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/public_key.proto

package org.xmtp.proto.message.contents;

@kotlin.jvm.JvmName("-initializesignedPublicKeyBundle")
public inline fun signedPublicKeyBundle(block: org.xmtp.proto.message.contents.SignedPublicKeyBundleKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundle =
  org.xmtp.proto.message.contents.SignedPublicKeyBundleKt.Dsl._create(org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundle.newBuilder()).apply { block() }._build()
public object SignedPublicKeyBundleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundle.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundle.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundle = _builder.build()

    /**
     * <pre>
     * Identity key MUST be signed by the wallet.
     * </pre>
     *
     * <code>.xmtp.message_contents.SignedPublicKey identity_key = 1;</code>
     */
    public var identityKey: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey
      @JvmName("getIdentityKey")
      get() = _builder.getIdentityKey()
      @JvmName("setIdentityKey")
      set(value) {
        _builder.setIdentityKey(value)
      }
    /**
     * <pre>
     * Identity key MUST be signed by the wallet.
     * </pre>
     *
     * <code>.xmtp.message_contents.SignedPublicKey identity_key = 1;</code>
     */
    public fun clearIdentityKey() {
      _builder.clearIdentityKey()
    }
    /**
     * <pre>
     * Identity key MUST be signed by the wallet.
     * </pre>
     *
     * <code>.xmtp.message_contents.SignedPublicKey identity_key = 1;</code>
     * @return Whether the identityKey field is set.
     */
    public fun hasIdentityKey(): kotlin.Boolean {
      return _builder.hasIdentityKey()
    }

    /**
     * <pre>
     * Pre-key MUST be signed by the identity key.
     * </pre>
     *
     * <code>.xmtp.message_contents.SignedPublicKey pre_key = 2;</code>
     */
    public var preKey: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey
      @JvmName("getPreKey")
      get() = _builder.getPreKey()
      @JvmName("setPreKey")
      set(value) {
        _builder.setPreKey(value)
      }
    /**
     * <pre>
     * Pre-key MUST be signed by the identity key.
     * </pre>
     *
     * <code>.xmtp.message_contents.SignedPublicKey pre_key = 2;</code>
     */
    public fun clearPreKey() {
      _builder.clearPreKey()
    }
    /**
     * <pre>
     * Pre-key MUST be signed by the identity key.
     * </pre>
     *
     * <code>.xmtp.message_contents.SignedPublicKey pre_key = 2;</code>
     * @return Whether the preKey field is set.
     */
    public fun hasPreKey(): kotlin.Boolean {
      return _builder.hasPreKey()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundle.copy(block: org.xmtp.proto.message.contents.SignedPublicKeyBundleKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundle =
  org.xmtp.proto.message.contents.SignedPublicKeyBundleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundleOrBuilder.identityKeyOrNull: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey?
  get() = if (hasIdentityKey()) getIdentityKey() else null

public val org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKeyBundleOrBuilder.preKeyOrNull: org.xmtp.proto.message.contents.PublicKeyOuterClass.SignedPublicKey?
  get() = if (hasPreKey()) getPreKey() else null

