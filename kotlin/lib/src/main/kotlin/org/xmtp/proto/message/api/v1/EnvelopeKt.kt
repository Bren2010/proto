//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_api/v1/message_api.proto

package org.xmtp.proto.message.api.v1;

@kotlin.jvm.JvmName("-initializeenvelope")
public inline fun envelope(block: org.xmtp.proto.message.api.v1.EnvelopeKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.api.v1.MessageApiOuterClass.Envelope =
  org.xmtp.proto.message.api.v1.EnvelopeKt.Dsl._create(org.xmtp.proto.message.api.v1.MessageApiOuterClass.Envelope.newBuilder()).apply { block() }._build()
public object EnvelopeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: org.xmtp.proto.message.api.v1.MessageApiOuterClass.Envelope.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: org.xmtp.proto.message.api.v1.MessageApiOuterClass.Envelope.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): org.xmtp.proto.message.api.v1.MessageApiOuterClass.Envelope = _builder.build()

    /**
     * <pre>
     * The topic the message belongs to,
     * If the message includes the topic as well
     * it MUST be the same as the topic in the envelope.
     * </pre>
     *
     * <code>string content_topic = 1;</code>
     */
    public var contentTopic: kotlin.String
      @JvmName("getContentTopic")
      get() = _builder.getContentTopic()
      @JvmName("setContentTopic")
      set(value) {
        _builder.setContentTopic(value)
      }
    /**
     * <pre>
     * The topic the message belongs to,
     * If the message includes the topic as well
     * it MUST be the same as the topic in the envelope.
     * </pre>
     *
     * <code>string content_topic = 1;</code>
     */
    public fun clearContentTopic() {
      _builder.clearContentTopic()
    }

    /**
     * <pre>
     * Message creation timestamp
     * If the message includes the timestamp as well
     * it MUST be equivalent to the timestamp in the envelope.
     * </pre>
     *
     * <code>uint64 timestamp_ns = 2;</code>
     */
    public var timestampNs: kotlin.Long
      @JvmName("getTimestampNs")
      get() = _builder.getTimestampNs()
      @JvmName("setTimestampNs")
      set(value) {
        _builder.setTimestampNs(value)
      }
    /**
     * <pre>
     * Message creation timestamp
     * If the message includes the timestamp as well
     * it MUST be equivalent to the timestamp in the envelope.
     * </pre>
     *
     * <code>uint64 timestamp_ns = 2;</code>
     */
    public fun clearTimestampNs() {
      _builder.clearTimestampNs()
    }

    /**
     * <code>bytes message = 3;</code>
     */
    public var message: com.google.protobuf.ByteString
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * <code>bytes message = 3;</code>
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun org.xmtp.proto.message.api.v1.MessageApiOuterClass.Envelope.copy(block: org.xmtp.proto.message.api.v1.EnvelopeKt.Dsl.() -> kotlin.Unit): org.xmtp.proto.message.api.v1.MessageApiOuterClass.Envelope =
  org.xmtp.proto.message.api.v1.EnvelopeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

