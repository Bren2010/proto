// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: authn/v1/authn.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthnApiClient is the client API for AuthnApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthnApiClient interface {
	Authenticate(ctx context.Context, in *ClientAuthRequest, opts ...grpc.CallOption) (*ClientAuthResponse, error)
}

type authnApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthnApiClient(cc grpc.ClientConnInterface) AuthnApiClient {
	return &authnApiClient{cc}
}

func (c *authnApiClient) Authenticate(ctx context.Context, in *ClientAuthRequest, opts ...grpc.CallOption) (*ClientAuthResponse, error) {
	out := new(ClientAuthResponse)
	err := c.cc.Invoke(ctx, "/xmtp.authn.v1.AuthnApi/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthnApiServer is the server API for AuthnApi service.
// All implementations must embed UnimplementedAuthnApiServer
// for forward compatibility
type AuthnApiServer interface {
	Authenticate(context.Context, *ClientAuthRequest) (*ClientAuthResponse, error)
	mustEmbedUnimplementedAuthnApiServer()
}

// UnimplementedAuthnApiServer must be embedded to have forward compatible implementations.
type UnimplementedAuthnApiServer struct {
}

func (UnimplementedAuthnApiServer) Authenticate(context.Context, *ClientAuthRequest) (*ClientAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthnApiServer) mustEmbedUnimplementedAuthnApiServer() {}

// UnsafeAuthnApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthnApiServer will
// result in compilation errors.
type UnsafeAuthnApiServer interface {
	mustEmbedUnimplementedAuthnApiServer()
}

func RegisterAuthnApiServer(s grpc.ServiceRegistrar, srv AuthnApiServer) {
	s.RegisterService(&AuthnApi_ServiceDesc, srv)
}

func _AuthnApi_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthnApiServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmtp.authn.v1.AuthnApi/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthnApiServer).Authenticate(ctx, req.(*ClientAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthnApi_ServiceDesc is the grpc.ServiceDesc for AuthnApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthnApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xmtp.authn.v1.AuthnApi",
	HandlerType: (*AuthnApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthnApi_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn/v1/authn.proto",
}
