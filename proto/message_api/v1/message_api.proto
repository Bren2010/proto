// Message API
syntax = "proto3";
package xmtp.message_api.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./message_api/v1";

// RPC
service MessageApi {
    // Publish a message to the network
    rpc Publish (PublishRequest) returns (PublishResponse) {
        option (google.api.http) = {
        post: "/message/v1/publish"
        body: "*"
    };
    }
    // Subscribe to a stream of envelopers matching a predicate
    rpc Subscribe (SubscribeRequest) returns (stream Envelope) {
        option (google.api.http) = {
        post: "/message/v1/subscribe"
        body: "*"
    };
    }
    // Query the store for messages
    rpc Query (QueryRequest) returns (QueryResponse) {
        option (google.api.http) = {
        post: "/message/v1/query"
        body: "*"
    };
    }
}

// Sort direction
enum SortDirection {
    SORT_DIRECTION_UNSPECIFIED = 0;
    SORT_DIRECTION_ASCENDING = 1;
    SORT_DIRECTION_DESCENDING = 2;
}

// This is based off of the go-waku Index type, but with the
// receiverTime and pubsubTopic removed for simplicity.
// Both removed fields are optional
message IndexCursor {
    bytes digest = 1;
    sint64 sender_time = 2;
}

// Wrapper for potentially multiple types of cursor
message Cursor {
    // Making the cursor a one-of type, as I would like to change the way we
    // handle pagination to use a precomputed sort field.
    // This way we can handle both methods
    oneof cursor {
        IndexCursor index = 1;
    }
}

// This is based off of the go-waku PagingInfo struct, but with the direction
// changed to our SortDirection enum format
message PagingInfo {
    // Note: this is a uint32, while go-waku's pageSize is a uint64
    uint32 limit = 1;
    Cursor cursor = 2;
    SortDirection direction = 3;
}

// Envelope encapsulates a message while in transit.
message Envelope {
    string id = 1;
    string content_topic = 2;
    google.protobuf.Timestamp timestamp = 3;
    bytes message = 4;
}

// Publish
message PublishRequest {
    string content_topic = 1;
    bytes message = 2;
    google.protobuf.Timestamp timestamp = 3;
}

// Empty message as a response for Publish
message PublishResponse{
}

// Subscribe
message SubscribeRequest {
    repeated string content_topics = 1;
}


// Query
message QueryRequest {
    repeated string content_topics = 1;
    google.protobuf.Timestamp start_time = 2;
    google.protobuf.Timestamp end_time = 3;
    PagingInfo paging_info = 4;
}

// The response, containing envelopes, for a query
message QueryResponse{
    repeated Envelope envelopes = 1;
    PagingInfo paging_info = 2;
}
