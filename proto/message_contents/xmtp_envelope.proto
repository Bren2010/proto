// Protos for XMTP Messages and their headers
syntax = "proto3";

package xmtp.message_contents;

import "message_contents/public_key.proto";

option go_package = "github.com/xmtp/proto/go/message_contents";

// ContentTypeId is used to identify the type of content stored in a Message.
message ContentTypeId {
    string authority_id = 1;  // authority governing this content type
    string type_id = 2;  // type identifier
    uint32 version_major = 3; // major version of the type
    uint32 version_minor = 4; // minor version of the type
}

// Recognized compression algorithms
// protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
enum Compression {
    COMPRESSION_DEFLATE = 0;
    COMPRESSION_GZIP = 1;
}
// protolint:enable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH

// EncodedContent is the type embedded in Ciphertext.payload bytes,
// it bundles the encoded content with metadata identifying the type of content
// and parameters required for correct decoding and presentation of the content.
message EncodedContent {
    // content type identifier used to match the payload with
    // the correct decoding machinery
    ContentTypeId type = 1;
    // optional encoding parameters required to correctly decode the content
    map<string, string> parameters = 2;
    // optional fallback description of the content that can be used in case
    // the client cannot decode or render the content
    optional string fallback = 3;
    // optional compression; the value indicates algorithm used to
    // compress the encoded content bytes
    optional Compression compression = 5;
    // encoded content itself
    bytes content = 4;
}

// Ciphertext represents the payload of the message encoded and
// encrypted for transport.
// It is definited as a union to support cryptographic algorithm agility.
message Ciphertext {
    // The encrypted payload
    message Aes256gcmHkdfsha256 {
        bytes hkdf_salt = 1;
        bytes gcm_nonce = 2;
        // payload MUST contain encrypted encoding of EncodedContent message
        bytes payload = 3;
    }
    oneof union {
        Aes256gcmHkdfsha256 aes256_gcm_hkdf_sha256 = 1;
    }
}

// MessageHeader is encoded separately as the bytes are also used
// as associated data for authenticated encryption
message MessageHeader {
    PublicKeyBundle sender = 1;
    PublicKeyBundle recipient = 2;
    uint64 timestamp = 3;
}

// Message is the top level protocol element
message V1Message {
    bytes header_bytes = 1; // encapsulates the encoded MessageHeader
    Ciphertext ciphertext = 2;
}

// The outermost wrapper for a message in a conversation topic
message Message {
    oneof version {
        V1Message v1 = 1;
    }
}
