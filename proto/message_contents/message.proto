// Messages used for transport and storage of user conversations.
syntax = "proto3";

package xmtp.message_contents;

import "message_contents/ciphertext.proto";
import "message_contents/conversation_reference.proto";
import "message_contents/public_key.proto";

option go_package = "github.com/xmtp/proto/v3/go/message_contents";
option java_package = "org.xmtp.proto.message.contents";

// Message V1

// Message header is encoded separately as the bytes are also used
// as associated data for authenticated encryption
message MessageHeaderV1 {
    PublicKeyBundle sender = 1;
    PublicKeyBundle recipient = 2;
    uint64 timestamp = 3;
}

// Message is the top level protocol element
message MessageV1 {
    bytes header_bytes = 1;  // encapsulates encoded MessageHeaderV1
    // Ciphertext.payload MUST contain encrypted EncodedContent
    Ciphertext ciphertext = 2;
}

// Message V2

// Message header carries information that is not encrypted, and is therefore
// observable by the network. It is however authenticated as associated data
// of the AEAD encryption used to protect the message,
// thus providing tamper evidence.
message MessageHeaderV2 {
    // sender specified message creation time
    uint64 created_ns = 1;
    // the topic the message belongs to
    string topic = 2;
}

// Message combines the encoded header with the encrypted payload.
message MessageV2 {
    bytes header_bytes = 1;  // encapsulates encoded MessageHeaderV2
    // Ciphertext.payload MUST contain encrypted SignedContent
    Ciphertext ciphertext = 2;
}

// Versioned Message
message Message {
    oneof version {
        MessageV1 v1 = 1;
        MessageV2 v2 = 2;
    }
}

// DecodedMessage represents the decrypted message contents.
// DecodedMessage instances are not stored on the network, but
// may be serialized and stored by clients
message DecodedMessage {
    string id = 1;
    string message_version = 2;
    string sender_address = 3;
    optional string recipient_address = 4;
    uint64 sent_ns = 5;
    string content_topic = 6;
    ConversationReference conversation = 7;
    bytes content_bytes = 8;  // encapsulates EncodedContent
}

// Plaintext header included with messages, visible to all
message PadlockMessageHeader {
    uint64 sent_ns = 1;
    // The session_id is derived via SHA256. Any other identifier will leak the
    // sender of the message.
    string session_id = 2;
}

// Encrypted body included with messages, only visible to recipients
// - For safety, the sender_account_id and sender_installation_id MUST be
//   derived from the session_id in the header by each installation receiving
//   the message
// - The recipient is unnecessary to include here - the recipient at the session
//   level is the receiving installation, and the recipient at the conversation
//   level is whoever is in the conversation referred to by convo_id (multiple
//   people in the case of groups)
// - The recipient installation MUST cross-check that the sender_account_id is a
//   valid participant of the conversation referred to by convo_id
// - The recipient installation MUST validate that the MessageHeader hashes to
//   the header_hash.
//   TODO is that sufficient to replace the AssociatedData in v2?
message PadlockMessagePayload {
    uint32 message_version = 1;
    bytes header_hash = 2;      // PadlockMessageHeader 
    string convo_id = 3;
    bytes content_bytes = 4;    // EncodedContent
}

// Combines the plaintext header with the encrypted payload
message PadlockMessageEnvelope {
    bytes header_bytes = 1;     // PadlockMessageHeader
    bytes ciphertext = 2;       // Encrypted PadlockMessagePayload
}